<?php
/**
 * @file
 * Install, update and uninstall functions for the Simplify module.
 */

/**
 * Implements hook_install().
 *
 * Set default values in config files.
 */
function simplify_install() {
  // Update module weight to allow it to run after other modules.
  db_update('system')
    ->fields(array('weight' => 5))
    ->condition('name', 'simplify')
    ->execute();

  // Global.
  $config_global = config('simplify.global');
  $types = array(
    'nodes',
    'users',
    'comments',
    'taxonomy',
    'blocks',
  );
  foreach ($types as $type) {
    $config_global->set($type, simplify_get_defaults($type));
  }
  $config_global->save();

  // Nodes & comments.
  $config_nodes = config('simplify.nodes');
  $config_comments = config('simplify.comments');
  $node_types = node_type_get_names();
  foreach ($node_types as $type => $name) {
    $config_nodes->set($type, simplify_get_defaults('nodes'));
    $config_comments->set($type, simplify_get_defaults('comments'));
  }
  $config_nodes->save();
  $config_comments->save();

  // Taxonomy.
  if (module_exists('taxonomy')) {
    $config_taxonomy = config('simplify.taxonomy');
    $vocabularies = taxonomy_vocabulary_load_multiple(FALSE);
    foreach ($vocabularies as $name => $vocabulary) {
      $config_taxonomy->set($name, simplify_get_defaults('taxonomy'));
    }
    $config_taxonomy->save();
  }
}

/**
 * Update config files to the new format.
 */
function simplify_update_1100(&$sandbox) {
  // Global.
  $config_global = config('simplify.global');
  $types = array(
    'nodes',
    'users',
    'comments',
    'taxonomy',
    'blocks',
  );
  foreach ($types as $type) {
    $existing_global = $config_global->get($type);
    $config_global->set($type, simplify_get_defaults($type, $existing_global));
  }
  $config_global->save();

  // Nodes & comments.
  $config_nodes = config('simplify.nodes');
  $config_comments = config('simplify.comments');
  $node_types = node_type_get_names();
  foreach ($node_types as $type => $name) {
    $existing_nodes = $config_nodes->get($type);
    $config_nodes->set($type, simplify_get_defaults('nodes', $existing_nodes));
    $existing_comments = $config_comments->get($type);
    $config_comments->set($type, simplify_get_defaults('comments', $existing_comments));
  }
  $config_nodes->save();
  $config_comments->save();

  // Taxonomy.
  if (module_exists('taxonomy')) {
    $config_taxonomy = config('simplify.taxonomy');
    $vocabularies = taxonomy_vocabulary_load_multiple(FALSE);
    foreach ($vocabularies as $name => $vocabulary) {
      $existing_taxonomy = $config_taxonomy->get($name);
      $config_taxonomy->set($name, simplify_get_defaults('taxonomy', $existing_taxonomy));
    }
    $config_taxonomy->save();
  }
}

/**
 * Convert variables to config.
 */
function simplify_update_1000(&$sandbox) {
  // Global.
  $config_global = config('simplify.global');
  $config_global->set('nodes', update_variable_get('simplify_nodes_global', array()));
  $config_global->set('users', update_variable_get('simplify_users_global', array()));
  $config_global->set('comments', update_variable_get('simplify_comments_global', array()));
  $config_global->set('taxonomy', update_variable_get('simplify_taxonomy_global', array()));
  $config_global->set('blocks', update_variable_get('simplify_blocks_global', array()));
  $config_global->save();
  update_variable_del('simplify_nodes_global');
  update_variable_del('simplify_users_global');
  update_variable_del('simplify_comments_global');
  update_variable_del('simplify_taxonomy_global');
  update_variable_del('simplify_blocks_global');

  // Nodes & comments.
  $node_types = node_type_get_names();
  $config_nodes = config('simplify.nodes');
  $config_comments = config('simplify.comments');
  foreach ($node_types as $type => $name) {
    $config_nodes->set($type, update_variable_get('simplify_nodes_' . $type, array()));
    $config_comments->set($type, update_variable_get('simplify_comments_' . $type, array()));
    update_variable_del('simplify_nodes_' . $type);
    update_variable_del('simplify_comments_' . $type);
  }
  $config_nodes->save();
  $config_comments->save();

  // Taxonomy.
  if (module_exists('taxonomy')) {
    $vocabularies = taxonomy_vocabulary_load_multiple(FALSE);
    $config_taxonomy = config('simplify.taxonomy');
    foreach ($vocabularies as $name => $vocabulary) {
      $config_taxonomy->set($name, update_variable_get('simplify_taxonomy_' . $name, array()));
      update_variable_del('simplify_taxonomy_' . $name);
    }
    $config_taxonomy->save();
  }
}

/**
 * Implements hook_update_last_removed().
 */
function simplify_update_last_removed() {
  return 7301;
}
